function _qcd_comp() {
  # Verify Resource Files
  _verify_files

  # End Resource Validation------------------------------------------------------------------------------------------------------------------------------------------

  # Initialize Completion List
  local comp_list=()

  # Store Current Argument
  local curr_arg=${COMP_WORDS[COMP_CWORD]}

  # End Global Function Variable Initialization----------------------------------------------------------------------------------------------------------------------

  # Determine Completion Type
  if [[ "${curr_arg}" == */* ]]
  then
    # Store Symbolic Link
    local link_arg=$(_get_rname "${curr_arg}")

    # Obtain Trailing Subdirectory Path
    local trail_arg="${curr_arg##*/}"

    # Determine Subdirectory Locality
    local si=$((${#sym_link} + 1))
    local ei=$((${#curr_arg} - ${#trail_path} - ${si}))

    # Store Subdirectory Path Component
    local subs_arg=${curr_arg:${si}:${ei}}

    # End Input Parsing----------------------------------------------------------------------------------------------------------------------------------------------

    # Initialize Linked Paths
    local link_paths=${NSET}

    # Resolve Linked Directories
    if [[ ! -d "${curr_arg}" ]]
    then
      # Check For Indirect Link Matching
      if [[ -z $(command egrep -s -x "${link_arg}:.*" ${QCD_STORE} 2> /dev/null) ]]
      then
        # Initialize Parameters
        local i=0 wlink_arg=${ESTR}

        # Check For Hidden Directory Prefix
        if [[ "${link_arg}" == \.* ]]
        then
          # Override Parameters
          i=1; wlink_arg="${BSLH}${CWD}"
        fi

        # Wildcard Symbolic Link
        for ((;i < ${#link_arg}; i++))
        do
          # Get Character At Index
          local c=${link_arg:${i}:1}

          # Append Wildcard
          wlink_arg="${wlink_arg}${c}.*"
        done

        # Set IFS
        local IFS=$'\n'

        # Get Sequence Matched Symbolic Linkages From Store File
        link_paths=($(command printf "%s\n" $(command egrep -s -i -x "${wlink_arg}:.*" ${QCD_STORE} 2> /dev/null | command awk -F ':' '{print $2}')))
      else
        # Set IFS
        local IFS=$'\n'

        # Get Link Matched Symbolic Linkages From Store File
        link_paths=($(command printf "%s\n" $(command egrep -s -x "${link_arg}:.*" ${QCD_STORE} 2> /dev/null | command awk -F ':' '{print $2}')))
      fi

      # End Linkage Acquisition--------------------------------------------------------------------------------------------------------------------------------------

      # Set IFS
      local IFS=$'\n'

      # Initialize Resolved Directories
      local res_dirs=()

      # Iterate Over Linked Paths
      for link_path in ${link_paths[@]}
      do
        # Substring Path From Delimiter
        link_path=$(_split_path "${link_path}")

        # Form Complete Path
        link_path=$(_escape_dir "${link_path}${subs_arg}")

        # Add Resolved Directory
        if [[ -d "${res_dir}" ]]
        then
          # Add Resolved Directory To List
          res_dirs+=($(command printf "%s\n" "${link_path}"))
        fi
      done
    else
      # Resolve Local Directories
      res_dirs=$(_escape_dir "${curr_arg}")
    fi

    # End Path Resolution--------------------------------------------------------------------------------------------------------------------------------------------

    # Error Check Resolved Directory
    if [[ ! -z ${res_dirs} ]]
    then
      # Set IFS
      local IFS=$'\n'

      # Initialize Subdirectories
      local sub_dirs=()

      # Iterate Over Resolved Directories
      for res_dir in ${res_dirs[@]}
      do
        # Add Linked Subdirectories Of Similar Visibility
        if [[ ! ${trail_arg:0:1} == ${CWD} ]]
        then
          # Add Compressed Visible Linked Subdirectories
          sub_dirs+=($(command printf "%s\n" $(command ls -F "${res_dir}" 2> /dev/null | command egrep -s -x ".*/" 2> /dev/null)))
        else
          # Add Compressed Linked Subdirectories
          sub_dirs+=($(command printf "%s\n" $(command ls -aF "${res_dir}" 2> /dev/null | command egrep -s -x ".*/" 2> /dev/null)))
        fi
      done

      # End Subdirectory Acquisition---------------------------------------------------------------------------------------------------------------------------------

      # Set IFS
      local IFS=$'\n'

      # Format Symbolic Link
      link_arg="${link_arg}${FLSH}"

      # Add Linked Subdirectories
      for sub_dir in ${sub_dirs[@]}
      do
        # Generate Linked Subdirectory
        local link_sub=$(_escape_dir "${link_arg}${subs_arg}${sub_dir%/}")

        # Determine Subdirectory Existence
        if [[ ! -d "${link_sub}" ]]
        then
          # Append Completion Slash
          link_sub="${link_sub}${FLSH}"
        fi

        # Append To Linked Subdirectory
        comp_list+=("${link_sub}")
      done

      # Set Completion List
      COMPREPLY=($(command compgen -W "$(command printf "%s\n" "${comp_list[@]}")" "${curr_arg}" 2> /dev/null))

      # End Option Generation----------------------------------------------------------------------------------------------------------------------------------------
    fi
  else
    # Get Symbolic Links From Link File
    local link_dirs=$(command awk '{print $0 "/\n"}' ${QCD_LINKS})

    # Store Current Directory
    local pwd=$(command basename "$(_get_pwd)")

    # Initialize Ignore Boolean
    local curr_rem=${FALSE}

    # End Linkage Acquisition----------------------------------------------------------------------------------------------------------------------------------------

    # Set IFS
    local IFS=$'\n'

    # Iterate Over Symbolic Links
    for link_dir in ${link_dirs}
    do
      # Add Symbolic Links Outside Of Current Directory
      if [[ ! -d "${link_dir}" ]]
      then
        # Ignore Linkages
        if [[ ${curr_rem} -eq ${FALSE} && "${link_dir%/}" == "${pwd%/}" ]]
        then
          # Exlude Current Directory
          curr_rem=$TRUE
        elif [[ ${curr_arg:0:1} == ${CWD} && ${link_dir:0:1} == ${CWD} || ! ${curr_arg:0:1} == ${CWD} && ! ${link_dir:0:1} == ${CWD} ]]
        then
          # Add Symbolic Links Of Similar Visibility
          comp_list+=("${link_dir}")
        fi
      fi
    done

    # Set Completion List
    COMPREPLY=($(command compgen -W "$(command printf "%s\n" "${comp_list[@]}")" "${curr_arg}" 2> /dev/null))

    # End Option Generation------------------------------------------------------------------------------------------------------------------------------------------
  fi
}
